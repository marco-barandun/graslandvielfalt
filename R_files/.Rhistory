)
)
)
# Create the species table
(t <- datatable(
orths,
class = "display nowrap",
escape = FALSE,
rownames = TRUE,
options = list(
dom = "lfrtip",
lengthMenu = list(c(10, 25, 50, -1), c("10", "25", "50", "All")),
pageLength = 25,
initComplete = JS(
"function(settings, json) {",
"  var table = settings.oInstance.api();",
"  var input = $('<input type=\"text\" placeholder=\"Search column\">');",
"  var filter = $('div.dataTables_filter');",
"  var rowNames = table.column(0).data().toArray();",  # Get the row names from the first column
"  $('thead tr', table.table().container()).append('<th></th>');",
"  $('thead tr th:last-child', table.table().container()).addClass('no-search');",
"  input.on('keyup', function () {",
"    var searchValue = input.val().toLowerCase();",
"    table.columns().every(function(i) {",
"      if (i === 0 || table.column(i).header().textContent.toLowerCase().indexOf(searchValue) > -1 || table.column(i).header().textContent === 'Species') {",
"        $(table.column(i).header()).show();",
"        $(table.column(i).footer()).show();",
"        this.nodes().each(function(cell, j) {",
"          if (i === 0) {",
"            $(cell).text(rowNames[j]);",  # Assign row names to the cells of the first column
"            $(cell).show();",
"          } else {",
"            $(cell).show();",
"          }",
"        });",
"      } else {",
"        $(table.column(i).header()).hide();",
"        $(table.column(i).footer()).hide();",
"        this.nodes().each(function(cell, j) {",
"          if (i === 0) {",
"            $(cell).hide();",
"          } else {",
"            $(cell).hide();",
"          }",
"        });",
"      }",
"    });",
"  });",
"  filter.prepend(input);",
"  filter.css('display', 'flex');",
"  input.css('margin-right', '10px');",
"}"
),
columnDefs = list(
list(className = "dt-head-center", targets = "_all"),
list(className = "dt-body-center", targets = "_all")
)
)
))
View(orths)
as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID)
View(plots)
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
plots %>% select(ID, plotID)
as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID)
as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
left_join(plots %>% select(ID, plotID), by = "plotID")
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID")
View(orths)
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID")
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0)))
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ])
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame() %>%
select(ID, everything()) %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
t() %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
select(-plotID) %>%
select(where(~any(. != 0))) %>%
select(ID, everything()) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
mutate(sID = gsub("-", "", sub(".*?-+", "", ID))) %>%
select(-plotID, -ID) %>%
select(where(~any(. != 0))) %>%
select(sID, everything()) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
mutate(sID = gsub("-", "", sub(".*?-+", "", ID)))
plots <- read_csv("./2023-joinedPlotSelection_v3.csv") %>% filter(!priority %in% c("MP5", "MP6", "MP7"))
dorothea_orth <- readVegedaz("/Users/marco/GitHub/GitHub_G4B/2023_re-survey/1_original_data/Data_Dorothea_Kampmann/NFP48_C_Heuschreckenaufnahmen.tab")
orths <- as.data.frame(dorothea_orth$xtab) %>%
rownames_to_column(var = "rn") %>%
mutate(row_group = sub("\\..*$", "", rn)) %>%
mutate(across(-c(rn, row_group), ~ifelse(. != 0 & !is.na(.), 1, 0))) %>%
group_by(row_group) %>%
summarize(across(-rn, sum)) %>%
ungroup() %>%
filter(row_group %in% plots$plotID) %>%
rename(plotID = row_group) %>%
left_join(plots %>% select(ID, plotID), by = "plotID") %>%
mutate(sID = gsub("-", "", sub(".*?-+", "", ID))) %>%
select(-plotID, -ID) %>%
select(where(~any(. != 0))) %>%
select(sID, everything()) %>%
t() %>%
as.data.frame() %>%
setNames(.[1, ]) %>%
slice(-1) %>%
as.data.frame()
# Create the species table
(t <- datatable(
orths,
class = "display nowrap",
escape = FALSE,
rownames = TRUE,
options = list(
dom = "lfrtip",
lengthMenu = list(c(10, 25, 50, -1), c("10", "25", "50", "All")),
pageLength = 25,
initComplete = JS(
"function(settings, json) {",
"  var table = settings.oInstance.api();",
"  var input = $('<input type=\"text\" placeholder=\"Search column\">');",
"  var filter = $('div.dataTables_filter');",
"  var rowNames = table.column(0).data().toArray();",  # Get the row names from the first column
"  $('thead tr', table.table().container()).append('<th></th>');",
"  $('thead tr th:last-child', table.table().container()).addClass('no-search');",
"  input.on('keyup', function () {",
"    var searchValue = input.val().toLowerCase();",
"    table.columns().every(function(i) {",
"      if (i === 0 || table.column(i).header().textContent.toLowerCase().indexOf(searchValue) > -1 || table.column(i).header().textContent === 'Species') {",
"        $(table.column(i).header()).show();",
"        $(table.column(i).footer()).show();",
"        this.nodes().each(function(cell, j) {",
"          if (i === 0) {",
"            $(cell).text(rowNames[j]);",  # Assign row names to the cells of the first column
"            $(cell).show();",
"          } else {",
"            $(cell).show();",
"          }",
"        });",
"      } else {",
"        $(table.column(i).header()).hide();",
"        $(table.column(i).footer()).hide();",
"        this.nodes().each(function(cell, j) {",
"          if (i === 0) {",
"            $(cell).hide();",
"          } else {",
"            $(cell).hide();",
"          }",
"        });",
"      }",
"    });",
"  });",
"  filter.prepend(input);",
"  filter.css('display', 'flex');",
"  input.css('margin-right', '10px');",
"}"
),
columnDefs = list(
list(className = "dt-head-center", targets = "_all"),
list(className = "dt-body-center", targets = "_all")
)
)
))
htmltools::save_html(t, file="2023-orth-species-table.html")
library(leaflet)
library(leaflet.extras)
library(DT)
library(scales)
library(tidyverse)
library(sf)
library(htmltools)
library(googlesheets4)
library(mapview)
library(sp)
setwd("/Users/marco/GitHub/graslandvielfalt/R_files")
source("./config_plot_map.R")
donePlots <- read_csv("./2023-donePlots.csv") %>%
filter(Done == 1)
# Read the data from the Google Sheet
gsheet <- read_sheet("https://docs.google.com/spreadsheets/d/1rIDiZIn6EFSC1ifOlfHDeNpUIWRYYqZDQa5PPJdeaog/edit#gid=123", sheet = "Sheet1") %>%
mutate_all(as.character) %>%
filter(done_veg == 1)
plots <- read_csv("./2023-joinedPlotSelection_v3.csv") %>%
filter(!priority %in% c("MP5", "MP6", "MP7")) %>%
mutate(link = paste0("http://www.google.ch/maps/place/", Latitude, ",", Longitude)) %>%
left_join(gsheet %>% select("ID", "date_veg", "coord_inprec", "moss"), by = "ID") %>%
mutate(sID = sub("^[^-]*-", "", ID))
#gps <- read_tsv("./gps/2023-05-23-1116-bkp2.txt") %>% as.data.frame()
#write_csv(gps, "./gps/2023-05-23-1116-bkp2-to-clean.csv")
gps <- read_csv("./gps/2023-05-23-1116-bkp2-clean_v3.csv") %>%
mutate(sID = toupper(ifelse(nchar(Punkt_ID_G4B) <= 6,
gsub("^(.{2})(.{2})", "\\1-\\2-", Punkt_ID_G4B),
sub("^[^-]*-", "", Punkt_ID_G4B)))) %>%
select(-ID) %>%
left_join(plots, by = "sID")
plots <- plots %>%
left_join(gps %>% select(sID, Korrtyp), by = "sID")
poly <- rgdal::readOGR("./2023-plots-with-be-poly.geojson")
(t <- DT::datatable(plots %>%
mutate(ID = paste0('<a target="_parent" href=', .$link, '>', .$ID, ' </a>', sep = "")) %>%
select(-Latitude, -Longitude, -link, -P.Test.CO2., -Nutzungsid, -coord_inprec),
class = "display nowrap",
escape = F,
rownames = FALSE))
htmltools::save_html(t, file="2023-plot-table-andrea.html")
(t <- DT::datatable(plots %>% filter(!ID %in% gsheet$ID) %>%
mutate(ID = paste0('<a target="_parent" href=', .$link, '>', .$ID, ' </a>', sep = "")) %>%
select(-Latitude, -Longitude, -link, -P.Test.CO2., -Nutzungsid, -coord_inprec),
class = "display nowrap",
escape = F,
rownames = FALSE))
htmltools::save_html(t, file="2023-plot-table.html")
# Define a color palette with distinct colors
pal <- colorFactor(
palette = c("red", "orange", "yellow", "green", "blue", "purple", "magenta"),
domain = plots$priority
)
# Filter the points with LU2020 column set to true
DONE_BFF <- plots %>% filter(LU2020 == TRUE) %>% filter(ID %in% gsheet$ID)
DONE_NON_BFF <- plots %>% filter(LU2020 == FALSE | is.na(LU2020))%>% filter(ID %in% gsheet$ID)
BFF <- plots %>% filter(LU2020 == TRUE) %>% filter(!ID %in% gsheet$ID)
NON_BFF <- plots %>% filter(LU2020 == FALSE | is.na(LU2020))%>% filter(!ID %in% gsheet$ID)
(m <- leaflet(plots) %>%
addTiles(urlTemplate = "https://wmts20.geo.admin.ch/1.0.0/ch.swisstopo.pixelkarte-farbe/default/current/3857/{z}/{x}/{y}.jpeg",
attribution = '&copy; <a href="https://www.geo.admin.ch/de/about-swiss-geoportal/impressum.html#copyright">swisstopo</a>',
group = "Swiss Topographic Map") %>%
addTiles(urlTemplate = "https://wmts20.geo.admin.ch/1.0.0/ch.swisstopo.swissimage/default/current/3857/{z}/{x}/{y}.jpeg",
attribution = '&copy; <a href="https://www.geo.admin.ch/de/about-swiss-geoportal/impressum.html#copyright">swisstopo</a>',
group = "Satellite View") %>%
addCircleMarkers(data = DONE_BFF,
lat = ~Latitude, lng = ~Longitude,
popup = ~paste(paste0('<a target=\"_parent\" href=', link, '>', ID, ' </a>', sep = ""),
"<br>Elevation: ", round(as.numeric(elevation), 0),
"<br>Date veg: ", date_veg,
"<br>",
"<br><b>Korrtyp:</b> ", Korrtyp,
"<br><b>Slope:</b> ", round(as.numeric(slope), 0),
"<br><b>Moss collected:</b> ", moss,
sep = ""),
radius = 8, stroke = FALSE, fillOpacity = 1, color = ~pal(priority),
group = "DONE_BFF") %>%
addCircleMarkers(data = DONE_NON_BFF,
lat = ~Latitude, lng = ~Longitude,
popup = ~paste(paste0('<a target=\"_parent\" href=', link, '>', ID, ' </a>', sep = ""),
"<br>Elevation: ", round(as.numeric(elevation), 0),
"<br>Date veg: ", date_veg,
"<br>",
"<br><b>Korrtyp:</b> ", Korrtyp,
"<br><b>Slope:</b> ", round(as.numeric(slope), 0),
"<br><b>Moss collected:</b> ", moss,
sep = ""),
radius = 8, stroke = FALSE, fillOpacity = 1, color = ~pal(priority),
group = "DONE_NON_BFF") %>%
addCircleMarkers(data = BFF,
lat = ~Latitude, lng = ~Longitude,
popup = ~paste(paste0('<a target=\"_parent\" href=', link, '>', ID, ' </a>', sep = ""),
"<br>Elevation: ", round(as.numeric(elevation), 0),
"<br>Date veg: ", date_veg,
"<br>",
"<br><b>Korrtyp:</b> ", Korrtyp,
"<br><b>Slope:</b> ", round(as.numeric(slope), 0),
"<br><b>Moss collected:</b> ", moss,
sep = ""),
radius = 8, stroke = FALSE, fillOpacity = 1, color = ~pal(priority),
group = "BFF") %>%
addCircleMarkers(data = NON_BFF,
lat = ~Latitude, lng = ~Longitude,
popup = ~paste(paste0('<a target=\"_parent\" href=', link, '>', ID, ' </a>', sep = ""),
"<br>Elevation: ", round(as.numeric(elevation), 0),
"<br>Date veg: ", date_veg,
"<br>",
"<br><b>Korrtyp:</b> ", Korrtyp,
"<br><b>Slope:</b> ", round(as.numeric(slope), 0),
"<br><b>Moss collected:</b> ", moss,
sep = ""),
radius = 8, stroke = FALSE, fillOpacity = 1, color = ~pal(priority),
group = "NON_BFF") %>%
addLegend(pal = pal, values = plots$priority,
position = "bottomright", title = "Value") %>%
addScaleBar(position = "bottomleft") %>%
setView(lng = 9, lat = 46.4, zoom = 8) %>%
addPolygons(data = poly,
fill = FALSE,
color = "darkorange",
opacity = 0.9,
group = "Bewirtschaftungseinheiten") %>%
#addAwesomeMarkers(data = gsheet,
#                  lat = ~Latitude, lng = ~Longitude,
#                  icon = ~awesomeIcons(
#                    icon = "leaf",
#                    markerColor = "green",
#                    iconColor = "white",
#                    library = "fa"
#                  ),
#                  labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE),
#                  label = lapply(gsheet$ID, HTML),
#                  clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = FALSE),
#                  group = "Done Plots") %>%
addWMSTiles(
baseUrl = "https://wms.geo.admin.ch/",
layers = "ch.bav.haltestellen-oev",
group = "Public Transport Stops",
options = WMSTileOptions(format = "image/png", transparent = TRUE)
) %>%
addLayersControl(
baseGroups = c("Swiss Topographic Map", "Satellite View"),
overlayGroups = c("DONE_BFF", "DONE_NON_BFF", "BFF", "NON_BFF", "Done Plots", "Bewirtschaftungseinheiten", "Public Transport Stops"),
options = layersControlOptions(collapsed = TRUE)
) %>%
hideGroup(c("DONE_BFF", "DONE_NON_BFF", "Bewirtschaftungseinheiten", "Public Transport Stops", "Done Plots")) %>%
addFullscreenControl() %>%
addEasyButton(
easyButton(
icon = "fa-crosshairs",
title = "Locate Me",
onClick = JS(
"function(btn, map) {
map.locate({setView: true, enableHighAccuracy: true});
map.on('locationfound', function(e) {
var lat = e.latlng.lat;
var lng = e.latlng.lng;
var customIcon = L.icon({
iconUrl: './icons/my_position.png',
iconSize: [52, 52],
iconAnchor: [16, 32]
});
L.marker([lat, lng], { icon: customIcon }).addTo(map);
});
}"
)
)
)
)
htmlwidgets::saveWidget(m, file=paste("./2023-plot-map.html", sep = ""))
